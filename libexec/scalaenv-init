#!/usr/bin/env bash
# Summary: Configure the shell environment for scalaenv

set -e
test -n "${SCALAENV_DEBUG}" && set -x

# Provide scalaenv completions
if [ "$1" = "--complete" ]; then
  echo -
  echo --no-rehash
  echo bash
  echo fish
  echo ksh
  echo zsh
  exit
fi

print=""
no_rehash=""
for args in "$@"
do
  if [ "$args" = "-" ]; then
    print=1
    shift
  fi
  if [ "$args" = "--no-rehash" ]; then
    no_rehash=1
    shift
  fi
done

shell="$1"
if [ -z "$shell" ]; then
  shell="$(ps c -p "${PPID}" -o 'ucomm=' 2> /dev/null || true)"
  shell="${shell##-}"
  shell="${shell%% *}"
  shell="$(basename "${shell:-${SHELL}}")"
fi

READLINK=$(type -p greadlink readlink | head -1)
if [ -z "${READLINK}" ]; then
  echo "scalaenv: connot find readlink - are you missing GNU coreutils?" >& 2
  exit 1
fi

root="${0%/*}/.."

if [ -z "$print" ]; then
  case "$shell" in
    bash )
      profile='~/.bash_profile'
      ;;
    zsh )
      profile='~/.zshrc'
      ;;
    ksh )
      profile='~/.profile'
      ;;
    fish )
      profile='~/.config/fish/config.fish'
      ;;
    * )
      profile='your profile'
      ;;
  esac

  { echo "# Load scalaenv automatically by adding"
    echo "# the following to \"${profile}\":"
    echo ""
    case "$shell" in
      fish )
        echo 'status --is-interactive; and source (scalaenv init -|psub)'
        ;;
      * )
        echo 'eval "$(scalaenv init -)"'
        ;;
    esac
    echo ""
  } >& 2

  exit 1
fi

mkdir -p "${SCALAENV_ROOT}/"{shims,versions}

if [[ ":${PATH}:" != *:"${SCALAENV_ROOT}/shims":* ]]; then
  case "$shell" in
    fish )
      echo 'set -gx PATH "'${SCALAENV_ROOT}'/shims"' '$PATH' ';'
      echo "set -gx SCALAENV_SHELL $shell"
      ;;
    * )
      echo 'export PATH="'${SCALAENV_ROOT}'/shims:${PATH}"'
      echo "export SCALAENV_SHELL=$shell"
      ;;
  esac
fi

completion="${root}/completions/scalaenv.${shell}"
if [ -r "$completion" ]; then
  echo "source '$completion'"
fi

if [ -z "${no_rehash}" ]; then
  echo 'scalaenv rehash 2> /dev/null'
fi

commands=(`scalaenv-commands --sh`)
case "$shell" in
  fish )
  cat <<EOS
function scalaenv
  set command \$argv[1]
  if [ (count \$argv) -gt 0 ]
    set -e argv[1]
  end
  switch "\$command"
  case ${commands[*]}
    eval (scalaenv "sh-\$command" \$argv)
  case '*'
    command scalaenv "\$command" \$argv
  end
end
EOS
  ;;
  ksh )
  cat <<EOS
function rbenv {
  typeset command
EOS
  ;;
  * )
    cat <<EOS
 scalaenv() {
  local command
EOS
    ;;
esac

if [ "$shell" != "fish" ]; then
IFS="|"
cat <<EOS
  command="\$1"
  if [ "\$#" -gt 0 ]; then
    shift
  fi

  case "\$command" in
    ${commands[*]})
      eval "\`scalaenv "sh-\$command" "\$@"\`";;
    * )
      command scalaenv "\$command" "\$@";;
  esac
}
EOS
fi
